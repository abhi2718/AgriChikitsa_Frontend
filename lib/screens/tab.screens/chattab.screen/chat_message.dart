import 'package:agriChikitsa/model/chat_message_model.dart';
import 'package:agriChikitsa/screens/tab.screens/chattab.screen/chat_tab_view_model.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../model/bot_message_model.dart';
import '../../../model/user_model.dart';
import '../../../services/auth.dart';
import '../profiletab.screen/profile_view_model.dart';
import 'widgets/chat_bubble.dart';

class ChatMessages extends StatelessWidget {
  const ChatMessages({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context, listen: true);
    final useViewModel = Provider.of<ProfileViewModel>(context, listen: false);
    final user = User.fromJson(authService.userInfo["user"]);
    return Consumer<ChatTabViewModel>(builder: (context, provider, child) {
      return ListView.builder(
          padding: const EdgeInsets.only(
            bottom: 30,
            left: 13,
            right: 13,
          ),
          itemCount: provider.chatMessageList.length,
          reverse: true,
          itemBuilder: (context, index) {
            final messageList = provider.chatMessageList.reversed;
            dynamic message;
            try {
              message = messageList.elementAt(index);
            } catch (e) {
              return Container(); // Handle index out of range
            }
            if (message is ChatMessage) {
              return ChatBubbles.first(
                userImage: user.profileImage,
                message: message.text,
                options: [],
                isMe: true,
              );
            } else if (message is BotMessage1) {
              return ChatBubbles.next(
                message: message.questionHi,
                isMe: false,
                options: message.options,
              );
            }
          });
    });
  }
}
// if (provider.chatMessageList.elementAt(index).isMe == false) {
//               return const ChatBubbles.next(
//                   message:
//                       "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ Atin ‡§ú‡•Äü§ó, ‡§Ü‡§™‡§ï‡§æ ‡§è‡§ó‡•ç‡§∞‡•Ä‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ  ‡§Æ‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡•§\n\n\n‡§á‡§∏ ‡§Æ‡§Ç‡§ö ‡§∏‡•á ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•á ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§∞‡•ã‡§ó‡•ã‡§Ç ‡§è‡§µ‡§Ç ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡•Ä‡§ö‡•á ‡§™‡•Ç‡§õ‡•á ‡§ó‡§è ‡§∏‡§µ‡§æ‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§ö‡•Å‡§®‡•á‡•§‚è¨\n\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§∏‡•Ä‡§Æ‡§æ ‡§ö‡•Å‡§®‡•á ‡•§",
//                   isMe: false);
//             } else {